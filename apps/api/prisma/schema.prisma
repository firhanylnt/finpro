// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admins {
  id        Int       @id @default(autoincrement())
  fullname  String
  email     String    @unique
  password  String
  role_id   Int
  store_id  Int?
  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int
  deletedBy Int?
  roles     Roles     @relation(fields: [role_id], references: [id])
  store     Stores?   @relation(fields: [store_id], references: [id])
}

model Users {
  id           Int            @id @default(autoincrement())
  fullname     String
  email        String         @unique
  password     String
  status       Boolean        @default(true)
  is_verified  Boolean
  fb_token     String
  gmail_token  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  createdBy    Int
  updatedBy    Int
  deletedBy    Int?
  Cart         Cart[]
  Transactions Transactions[]
}

model Roles {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdBy   Int
  updatedBy   Int
  deletedBy   Int?
  admin       Admins[]
}

model Stores {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  lat             String
  long            String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  createdBy       Int
  updatedBy       Int
  deletedBy       Int?
  admin           Admins[]
  productdiscount ProductDiscount[]
}

model Products {
  id                  Int                   @id @default(autoincrement())
  product_category_id Int
  name                String                @unique
  description         String
  price               Decimal
  status              Boolean
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int
  deletedBy           Int?
  productcategory     ProductCategory       @relation(fields: [product_category_id], references: [id])
  productimages       ProductImages[]
  productdiscount     ProductDiscount[]
  stock               Stock[]
  Cart                Cart[]
  TransactionsDetails TransactionsDetails[]
}

model ProductCategory {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  createdBy   Int
  updatedBy   Int
  deletedBy   Int?
  products    Products[]
}

model ProductImages {
  id         Int      @id @default(autoincrement())
  product_id Int
  image_name String
  image_url  String
  products   Products @relation(fields: [product_id], references: [id])
}

model ProductDiscount {
  id          Int      @id @default(autoincrement())
  product_id  Int
  store_id    Int
  amount_type String
  amount      Decimal
  products    Products @relation(fields: [product_id], references: [id])
  stores      Stores   @relation(fields: [store_id], references: [id])
}

model Stock {
  id          Int           @id @default(autoincrement())
  product_id  Int
  store_id    Int
  qty         Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  createdBy   Int
  updatedBy   Int
  deletedBy   Int?
  jurnalstock JurnalStock[]
  products    Products      @relation(fields: [product_id], references: [id])
}

model JurnalStock {
  id        Int       @id @default(autoincrement())
  stock_id  Int
  type      String
  qty       Int
  status    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int
  deletedBy Int?
  stock     Stock     @relation(fields: [stock_id], references: [id])
}

model Discount {
  id               Int          @id @default(autoincrement())
  name             String
  discount_type_id Int
  status           Boolean
  start_date       DateTime
  end_date         DateTime
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  createdBy        Int
  updatedBy        Int
  deletedBy        Int?
  discounttype     DiscountType @relation(fields: [discount_type_id], references: [id])
}

model DiscountType {
  id       Int        @id @default(autoincrement())
  name     String
  discount Discount[]
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  qty        Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      Users    @relation(fields: [user_id], references: [id])
  products   Products @relation(fields: [product_id], references: [id])
}

model Transactions {
  id                  Int                   @id @default(autoincrement())
  code                String
  user_id             Int
  amount              Decimal
  discount            Decimal
  tax                 Decimal
  admin_fee           Decimal
  gross_amount        Decimal
  payment_method_id   Int
  status              Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int
  deletedBy           Int?
  users               Users                 @relation(fields: [user_id], references: [id])
  paymentmethod       PaymentMethod         @relation(fields: [payment_method_id], references: [id])
  TransactionsDetails TransactionsDetails[]
}

model TransactionsDetails {
  id             Int          @id @default(autoincrement())
  transaction_id Int
  product_id     Int
  qty            Int
  price          Decimal
  transaction    Transactions @relation(fields: [transaction_id], references: [id])
  products       Products     @relation(fields: [product_id], references: [id])
}

model PaymentMethod {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  createdBy    Int
  updatedBy    Int
  deletedBy    Int?
  Transactions Transactions[]
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@map("samples") // if you want to use snake_case format
}